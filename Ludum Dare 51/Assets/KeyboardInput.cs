//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/KeyboardInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @KeyboardInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @KeyboardInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""KeyboardInput"",
    ""maps"": [
        {
            ""name"": ""Typing"",
            ""id"": ""dfdf48bf-dee8-4a20-81a1-15432610f1c2"",
            ""actions"": [
                {
                    ""name"": ""A"",
                    ""type"": ""Value"",
                    ""id"": ""77fd4b31-c664-4c54-9ec6-a1cedd44faca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press(pressPoint=0.01)"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""B"",
                    ""type"": ""Button"",
                    ""id"": ""9e182faa-ede5-4686-bd1a-689f70e53cde"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""key"",
                    ""type"": ""PassThrough"",
                    ""id"": ""69478927-1884-41a6-b441-212cb6f795a1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": ""Press(behavior=1)"",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""40f27fd7-6b0a-45f8-ada8-fedd3d58c5dd"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b15deceb-4cd0-487b-9e4e-0f29b5ba9f92"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""584ecc6d-fc77-4b26-802d-c1c7d8955af9"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2f3bddee-d510-4001-bdda-97badb9d4926"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Typing
        m_Typing = asset.FindActionMap("Typing", throwIfNotFound: true);
        m_Typing_A = m_Typing.FindAction("A", throwIfNotFound: true);
        m_Typing_B = m_Typing.FindAction("B", throwIfNotFound: true);
        m_Typing_key = m_Typing.FindAction("key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Typing
    private readonly InputActionMap m_Typing;
    private ITypingActions m_TypingActionsCallbackInterface;
    private readonly InputAction m_Typing_A;
    private readonly InputAction m_Typing_B;
    private readonly InputAction m_Typing_key;
    public struct TypingActions
    {
        private @KeyboardInput m_Wrapper;
        public TypingActions(@KeyboardInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @A => m_Wrapper.m_Typing_A;
        public InputAction @B => m_Wrapper.m_Typing_B;
        public InputAction @key => m_Wrapper.m_Typing_key;
        public InputActionMap Get() { return m_Wrapper.m_Typing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TypingActions set) { return set.Get(); }
        public void SetCallbacks(ITypingActions instance)
        {
            if (m_Wrapper.m_TypingActionsCallbackInterface != null)
            {
                @A.started -= m_Wrapper.m_TypingActionsCallbackInterface.OnA;
                @A.performed -= m_Wrapper.m_TypingActionsCallbackInterface.OnA;
                @A.canceled -= m_Wrapper.m_TypingActionsCallbackInterface.OnA;
                @B.started -= m_Wrapper.m_TypingActionsCallbackInterface.OnB;
                @B.performed -= m_Wrapper.m_TypingActionsCallbackInterface.OnB;
                @B.canceled -= m_Wrapper.m_TypingActionsCallbackInterface.OnB;
                @key.started -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
                @key.performed -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
                @key.canceled -= m_Wrapper.m_TypingActionsCallbackInterface.OnKey;
            }
            m_Wrapper.m_TypingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @A.started += instance.OnA;
                @A.performed += instance.OnA;
                @A.canceled += instance.OnA;
                @B.started += instance.OnB;
                @B.performed += instance.OnB;
                @B.canceled += instance.OnB;
                @key.started += instance.OnKey;
                @key.performed += instance.OnKey;
                @key.canceled += instance.OnKey;
            }
        }
    }
    public TypingActions @Typing => new TypingActions(this);
    public interface ITypingActions
    {
        void OnA(InputAction.CallbackContext context);
        void OnB(InputAction.CallbackContext context);
        void OnKey(InputAction.CallbackContext context);
    }
}
